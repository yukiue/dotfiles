(setq initial-buffer-choice t)
(setq initial-scratch-message "")


;; package
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
(add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/"))
(package-initialize)

;; server
(server-start)


;; mozc
(require 'mozc)
(setq default-input-method "japanese-mozc")


;; English font
(set-default-font "Source Code Pro")
(set-face-attribute 'default nil :height 150)


;; Japanese font
(set-fontset-font t 'japanese-jisx0208 (font-spec :family "IPAExGothic"))


;; delete backward char
(keyboard-translate ?\C-h ?\C-?)


;; create new frame
(global-set-key "\M-n" 'make-frame)


;; load path
(setq load-path
      (append (list nil
                    (expand-file-name "~/.emacs.d/lisp"))
              load-path))


;; no backup file
(setq make-backup-files nil) ;; *.~
(setq auto-save-default nil) ;; .*#
(setq delete-auto-save-files t)

;; follow symbolic link
(setq vc-follow-symlinks t)


;; browser
(setq browse-url-browser-function 'browse-url-chromium)


;; chmod after save
(add-hook 'after-save-hook 'executable-make-buffer-file-executable-if-script-p)


;; org to pdf
(setq org-latex-pdf-process
      '("uplatex %b.tex" "uplatex %b.tex" "dvipdfmx %b.dvi"))


;; open file after export
(eval-after-load "org"
  '(progn
     (delete '("\\.pdf\\'" . default) org-file-apps)
     (add-to-list 'org-file-apps '("\\.pdf\\'" . "mupdf %s")))
  )


;; helm
(helm-mode t)
(global-set-key (kbd "M-x") 'helm-M-x)
(global-set-key (kbd "C-x C-f") 'helm-find-files)
(global-set-key (kbd "C-x b") 'helm-mini)
(define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action)


;; mew
(global-set-key "\C-xm" 'mew)
(setq mew-imap-size 100000000) ;; 100MB
(setq mew-use-cached-passwd t)
(setq mew-signature-insert-last t)
(setq mew-save-dir "/tmp")
;; C-c C-e settings
(setq mew-prog-pdf-ext '("mupdf" ()t))
(setq mew-prog-image/*-ext '("mupdf" ()t))
(setq mew-prog-postscript '("gv" ()t))


;; recentf
(require 'recentf-ext)
(global-set-key "\M-r" 'helm-recentf)


;; elscreen
(setq elscreen-prefix-key (kbd "C-z"))
(setq elscreen-display-tab 8)
(setq elscreen-tab-display-kill-screen nil) ;; not display [X]
(setq elscreen-tab-display-control nil) ;; not display [<->]
(elscreen-start)
(elscreen-create-internal)
(bind-key "k" 'elscreen-kill-screen-and-buffers elscreen-map)


;; neotree
(require 'neotree)
(global-set-key "\C-xn" 'neotree-toggle)
;; all-the-icons
(require 'all-the-icons)
(setq neo-theme (if (display-graphic-p) 'icons 'arrow))


;; auto insert
(require 'autoinsert)
(add-hook 'find-file-hooks 'auto-insert)
(setq auto-insert-query nil)
(setq auto-insert-alist nil)
(setq auto-insert-alist
      (append '(
                (("\\.sh$" . "shell script template")
                 nil
                 "#!/bin/sh\n"
                 "\n"
                 _
                 )) auto-insert-alist))
(setq auto-insert-alist
      (append '(
                (("\\.py$" . "python template")
                 nil
                 "#!/usr/bin/env python3\n"
                 "\n"
                 _
                 )) auto-insert-alist))


;; restart emacs
(global-set-key "\C-c\C-r\C-r" 'restart-emacs)


;; dired list
(setq dired-listing-switches "-alh --group-directories-first")

;; dired keybinding
(define-key dired-mode-map (kbd "C-l") 'dired-up-directory)

;; open file in external application
(define-key dired-mode-map (kbd "RET") 'dired-open-file)
(setq dired-file-apps
      '(("pdf" . "mupdf")
        ("dvi" . "xdvi")
        ("eps" . "gv")
        ("jpg" . "iv")
        ("xls" . "libreoffice")))

(defun dired-open-file ()
  (interactive)
  (let* ((find-file-run-dired t)
         (file (dired-get-file-for-visit))
         (ext (file-name-extension file))
         (cmd (cdr (assoc ext dired-file-apps))))
    (if cmd
        (start-process cmd nil cmd file)
      ;; call find-file as default action
      (find-file file))))


;; dired
(global-set-key "\C-xd" (lambda ()
                          (interactive)
                          (dired default-directory)))


(defun return-current-working-directory-to-shell ()
  (expand-file-name
   (with-current-buffer
       (if (featurep 'elscreen)
           (let* ((frame-confs (elscreen-get-frame-confs (selected-frame)))
                  (num (nth 1 (assoc 'screen-history frame-confs)))
                  (cur-window-conf
                   (assoc 'window-configuration
                          (assoc num (assoc 'screen-property frame-confs))))
                  (marker (nth 2 cur-window-conf)))
             (marker-buffer marker))
         (nth 1
              (assoc 'buffer-list
                     (nth 1 (nth 1 (current-frame-configuration))))))
     default-directory)))


;; doc-annotate
(setq doc-view-scale-internally nil)
(add-hook 'doc-view-mode-hook
          '(lambda ()
             (local-set-key "c" 'doc-annotate-add-annotation)
             (local-set-key [mouse-1] 'doc-annotate-add-annotation)))
(autoload 'doc-annotate-mode "doc-annotate")
(autoload 'doc-annotate-add-annotation "doc-annotate")
(add-to-list 'auto-mode-alist '("\\.ant$" . doc-annotate-mode))

